mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
install.packages("dplyr")
install.packages("dplyr")
packageVersion("dplyr")
library(swirl)
swirl()
mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(X:size))
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?tbl_df
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distint
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
submit()
student3
students3
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
mutate <- mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bindrows
?bind_rows
bind_rows(passed, failed)
sat
?select
?separate
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 17, minutes = 37)
this_moment <- update(this_moment, hours = 17, minutes = 38, seconds = 0)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
?grep
getwd()
fileUrl -> "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
dir
dir()
?download.file
download.file(fileUrl, "./data/getdata_data_Fss06hid.csv")
dir("./data/")
?read.csv
q1.data <- read.csv("./data/getdata_data_Fss06hid.csv")
head(q1.data)
names(q1.data)
?strsplit
strsplit(names(q1.data),"wgtp")
strsplit(names(q1.data),"wgtp")[123]
q1.answer <- strsplit(names(q1.data),"wgtp")[123]
q1.answer
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, "./data/getdata_data_FGDP.csv")
q2.data <- read.csv("./data/getdata_data_FGDP.csv")
head(q2.data,10)
q2.data[2]
q2.data[3]
q2.data[4]
q2.data[5]
q2.data
names(q2.data)
q2.data$X.2
names(q2.data)
q2.data$X.3
q2.data
q2.data[,5:194]
q2.data[5:194,]
q2.data[5:194,6]
q2.data[5:194,5]
?gsub
gsub(",","",q2.data[5:194,5])
gsub(", ","",q2.data[5:194,5])
gsub(",","",q2.data[5:194,5])
as.float(gsub(",","",q2.data[5:194,5]))
?as
as.numeric(gsub(",","",q2.data[5:194,5]))
mean(as.numeric(gsub(",","",q2.data[5:194,5])))
q2.answer <- mean(as.numeric(gsub(",","",q2.data[5:194,5])))
names(q2.data)
head(q2.data)
?names
names(q2.data)[4]
names(q2.data)[4] <- "countryNames"
head(q2.data)
grep("^United",countryNames)
countryNames <- q2.data$countryNames
grep("^United",countryNames)
countryNames[grep("^United",countryNames)]
length(grep("^United",countryNames))
q3.answer <- c("grep("^United",countryNames)",length(grep("^United",countryNames)))
q3.answer <- c("grep("\^United",countryNames)",length(grep("^United",countryNames)))
q3.answer <- c("grep\(\"\^United",countryNames\)",length(grep("^United",countryNames)))
q3.answer <- c("grep\\(\\"\\^United",countryNames\\)",length(grep("^United",countryNames)))
"grep\\(\\"\\^United",countryNames\\)"
"grep"
"grep("
"grep(\""
"grep(\"^"
"grep(\"^United\",countryNames)"
q3.answer <- c("grep(\"^United\",countryNames)"",length(grep("^United",countryNames)))
q3.answer <- c("grep(\"^United\",countryNames),length(grep("^United",countryNames)))
)
q3.answer <- c("grep(\"^United\",countryNames)",length(grep("^United",countryNames)))
q3.anser
q3.answer
q3.answer
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, "./data/getdata_data_FEDSTATS_Country.csv")
q4.data <- read.csv("./data/getdata_data_FEDSTATS_Country.csv")
q4.data
head(q4.data)
head(q2.data)
head(q2.data)[1]
names(q2.data)[1] <- "CountryCode"
str(q2.data)
head(q2.data)
q2.data
names(q2.data)[3]
names(q2.data)[4]
names(q2.data)[5]
names(q2.data)[5] <- "GDP"
head(q2.data)
names(q2.data)[2]
names(q2.data)[3]
names(q2.data)[2] <- "Ranking"
head(q2.data)
q2.data
q2.data[5:194,]
q2.data[5:194,c("CountryCode", "Ranking", "countryNames", "GDP")]
q3.data <- q2.data[5:194,c("CountryCode", "Ranking", "countryNames", "GDP")]
head(q4.data)
str(q4.data)
?grep
grep("fiscal",q4.data$Special.Notes)
grepl("fiscal",q4.data$Special.Notes)
q4.data[grep("fiscal",q4.data$Special.Notes),]
str(q4.data[grep("fiscal",q4.data$Special.Notes),])
q4.data[grep("fiscal",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal [Jj]une",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal*[Jj]une",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal*June",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal+June",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal*June",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal.*June",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal.*[Jj]une",q4.data$Special.Notes),]$Special.Notes
q4.data[grep("[Ff]iscal.*[Jj]une",q4.data$Special.Notes),]
q4.data[grep("[Ff]iscal.*[Jj]une",q4.data$Special.Notes),]
q4.data[grep("[Ff]iscal.*[Jj]une",q4.data$Special.Notes),][1]
q4.data[grep("[Ff]iscal.*[Jj]une",q4.data$Special.Notes),][,1:1]
names(q4.data)
q4.data.sub <- q4.data[grep("[Ff]iscal.*[Jj]une",q4.data$Special.Notes),][,c("CountryCode","Special.Notes")]
q4.data.sub
q4.data
head(q4.data)
head(q4.data.sub)
head(q3.data)
?merge
q4.data.merge <- merge(q3.data, q4.data.sub, by = "CountryCode")
head(q4.data.merge)
q4.data.merge
q4.anser <- nrow(q4.data.merge)
rm("q4.anser")
q4.answer <- nrow(q4.data.merge)
q4.answer
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
class(sampleTimes)
years(sampleTimes)
year(sampleTimes)
library(lubridate)
?lubridate
format(sampleTimes,"%Y")
format(sampleTimes,"%Y") == "2012"
sampleTimes[format(sampleTimes,"%Y") == "2012"]
length(sampleTimes[format(sampleTimes,"%Y") == "2012"])
sampleTimes[format(sampleTimes,"%a %Y") == "Mon 2012"]
length(sampleTimes[format(sampleTimes,"%a %Y") == "Mon 2012"])
q5.answer <- c(length(sampleTimes[format(sampleTimes,"%Y") == "2012"]), length(sampleTimes[format(sampleTimes,"%a %Y") == "Mon 2012"]))
q5.answer
q1.answer
q2.answer
q3.answer
q4.answer
q5.answer
rm(list = ls())
package.install("brnn")
packages.install("brnn")
install.package("brnn")
install.packages("brnn")
library(brnn)
install.packages("brnn")
getwd()
install.packages("brnn")
dir()
install.packages("brnn")
R_LIBS_USER
install.packages("brnn")
?install.packages
install.packages("brnn")
source("brnn_test.R")
mean(abs(trainY-predict(brnn_fit))/abs(trainY))
plot(trainY[1:1000],type='l',ylim=range(c(trainY[1:1000],predict(brnn_fit)[1:1000])))
lines(predict(brnn_fit)[1:1000],col='blue')
print now()
print date()
now()
?sys.time
system.time()
?system.time
system.time(source("brnn_test.R"))
?detectCores
install.packages("parallel")
detectCores()
install.packages("parallel")
getAnywhere('brnn.default')
str(brnn)
rm(list=ls())
data_file <- 'U:/_Load Forecasting/Victoria/Short Term NN model/Hudson_North.csv'
data      <- read.table (data_file, sep = ',', header = TRUE)
data$StartDate <- as.Date(data$StartDate)
data_train      <- subset (data, StartDate >= '2011-01-01' & StartDate <= '2014-01-05')
data_train_input  <- data_train [, c("ForecastHour","DayOfWeek","Month","WetBulbTemperature",
"DewPointTemperature","WindSpeed","CloudCover",
"WeightedTemperatureHumidityIndex","LagVolume")]
data_train_output <- data_train$Volume/data_train$CustCount
require('brnn')
n_delays = 24
n_hidden = 15
trainX <- embed(data.matrix(data_train_input),n_delays+1)
trainY <- data_train_output[-(1:n_delays)]  # removing the first n_delays observations
brnn_fit <- brnn(x=trainX,y=trainY,neurons=15,epochs=5,verbose=TRUE)
rm(list = ls())
q()
source("brnn_test.R")
mean(abs(trainY-predict(brnn_fit))/abs(trainY))
plot(trainY[1:1000],type='l',ylim=range(c(trainY[1:1000],predict(brnn_fit)[1:1000])))
lines(predict(brnn_fit)[1:1000],col='blue')
head(data)
str(data)
source('C:/Users/apetkovski/Git/datasciencecoursera/brnn_test.R')
source('C:/Users/apetkovski/Git/datasciencecoursera/brnn_test.R')
source('C:/Users/apetkovski/Git/datasciencecoursera/brnn_test.R')
source("plot4.R")
setwd("C:/Users/apetkovski/Git/ExData_Plotting1")
source("plot4.R")
source("plot4.R")
source("plot4.R")
?legend
par(mfrow = c(2,2))
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type = "l", xlab = "", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.3, pt.cex = 1, bty = "n")
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
par(mfrow = c(2,2))
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type = "l", xlab = "", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.7, pt.cex = 1, bty = "n")
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type = "l", xlab = "", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.6, pt.cex = 1, bty = "n")
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type = "l", xlab = "", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.5, pt.cex = 1, bty = "n")
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power")
plot(DateTime, Voltage, type = "l", xlab = "", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.5, pt.cex = 1, bty = "n")
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power")
plot(DateTime, Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.5, pt.cex = 1, bty = "n")
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
with( data, {
plot(DateTime, Global_active_power, type = "l", xlab = ""
, ylab = "Global Active Power")
plot(DateTime, Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(DateTime, Sub_metering_1, type = "l", xlab = ""
, ylab = "Energy sub metering")
lines(DateTime, Sub_metering_2, type = "l", col = "red")
lines(DateTime, Sub_metering_3, type = "l", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2"
, "Sub_metering_3")
, lty = c(1,1,1), col = c("black","red","blue")
, cex = 0.5, pt.cex = 1, bty = "n", xjust = 1)
plot(DateTime, Global_reactive_power, type = "l", xlab = "datetime"
, ylab = "Global_reactive_power")
}
)
source("plot1.R")
source("plot2.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot2.R")
source("plot2.R")
source("plot2.R")
source("plot2.R")
source("plot1.R")
source("plot2.R")
q()
